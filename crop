#!/usr/bin/env php
<?php

ini_set("memory_limit", "-1");

if (file_exists(__DIR__ . '/../../autoload.php')) {
    require __DIR__ . '/../../autoload.php';
} else {
    require __DIR__ . '/vendor/autoload.php';
}

use Spatie\Image\Image;
use Spatie\Image\Manipulations;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;

(new SingleCommandApplication())
    ->setName('Crop Images')
    ->setVersion('1.2.0')
    ->addArgument('source', InputArgument::REQUIRED, 'The source directory')
    ->addArgument('width', InputArgument::REQUIRED, 'The width of the new images')
    ->addArgument('height', InputArgument::REQUIRED, 'The height of the new images')
    ->addOption('whitespace', 'w', InputOption::VALUE_OPTIONAL, 'Add whitespace around the cropped images', false)
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $finder = new Finder();
        $filesystem = new Filesystem();
        $path = getcwd() . '/' . $input->getArgument('source');
        $width = $input->getArgument('width');
        $height = $input->getArgument('height');
        $newPath = getcwd() . '/' . ($width != 'null' ? $width : '') . 'x' . ($height != 'null' ? $height : '') . '/';

        if (!$filesystem->exists($newPath)) {
            $filesystem->mkdir($newPath, 0755);
        }

        $finder->files()->name(['*.jpg', '*.jpeg', '*.JPG', '*.JPEG', '*.png', '*.PNG']);
        $files = $finder->in($path);

        $progressBar = new ProgressBar($output, count($files));
        $progressBar->start();

        foreach ($files as $file) {
            try {
                $image = Image::load($file->getRealPath());

                if ($width == "null") {
                    $image->height($height);
                } else if ($height == "null") {
                    $image->width($width);
                } else if ($input->getOption('whitespace') !== false) {
                    $image->fit(Manipulations::FIT_CONTAIN, $width, $height)
                    ->apply()
                    ->fit(Manipulations::FIT_FILL, $width, $height);
                } else {
                    $image->fit(Manipulations::FIT_CROP, $width, $height);
                }

                $image->optimize()->save($newPath . $file->getRelativePathname());
            } catch (\Exception $e) {
                $output->writeLn('Failed converting: ' . $file->getRelativePathname());
            }

            $progressBar->advance();
        }

        $progressBar->finish();
    })
    ->run();
